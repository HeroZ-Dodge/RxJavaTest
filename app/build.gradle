apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId project.PACKAGE_NAME
        minSdkVersion 18
        targetSdkVersion 23
        versionCode project.VERSION_CODE.toInteger()
        versionName project.VERSION_NAME
    }

//   打包签名信息
    signingConfigs {
        release {
            storeFile file(project.STORE_PATH)
            keyAlias project.KEY_ALIAS
            keyPassword project.KEY_PASSWORD
            storePassword project.STORE_PASSWORD
        }
        debug {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    productFlavors {
        app_dev { // 开发环境
            // manifestPlaceholders中写到的『mate_key』，『map_key』不支持用大写，否则Gradle编译会不通过。
            // 这里所设置的变量可以直接使用在『AndroidManifest.xml』中，使用方式为：${map_key}
            // android:label="${package_name}"
            manifestPlaceholders = [mate_key: "key_value", map_key: "map_key_value"]
            // 这里的参数是为了在 java 代码中使用，具体的使用方式为：context.getResources().getString(R.string.str_key);
            resValue("string", "str_key", "app_dev")
            buildConfigField("String", "BASE_URL", "\"${project.DEV_URL}\"")

        }

        app_test { // 测试环境
            buildConfigField("String", "BASE_URL", "\"${project.TEST_URL}\"")
        }

        app_release { // 正式环境
            buildConfigField("String", "BASE_URL", "\"${project.RELEASE_URL}\"")
        }
    }

    // 修改.apk文件命名
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def buildType = variant.buildType;
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName = "${variant.productFlavors[0].name}-${defaultConfig.versionCode}-${defaultConfig.versionName}-${buildType.name}.apk"
                output.outputFile = new File(rootDir.path + "/apk", fileName)
                println("file = ${output.outputFile.path}")
            }
        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
//    final SUPPORT_LIBRARY_VERSION = "23.1.1"
//    final RX_JAVA_VERSION = "1.1.0"
//    final RETROFIT_VERSION = "2.0.0-beta2"
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Android support
    compile "com.android.support:appcompat-v7:23.1.1"
    compile "com.android.support:recyclerview-v7:23.1.1"
    compile "com.android.support:cardview-v7:23.1.1"
    compile "com.android.support:support-annotations:23.1.1"
    // RxJava
    compile "io.reactivex:rxandroid:1.1.0"
    compile "io.reactivex:rxjava:1.1.0"
    // Retrofit
    compile "com.squareup.retrofit:retrofit:2.0.0-beta2"
    compile "com.squareup.retrofit:converter-gson:2.0.0-beta2"
    compile "com.squareup.retrofit:adapter-rxjava:2.0.0-beta2"
    compile 'com.google.code.gson:gson:2.5'
    compile 'in.srain.cube:ultra-ptr:1.0.11'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp-integration:1.4.0@aar'
    compile(name: 'cgusdk-v1.1.0.7', ext: 'aar')
}


